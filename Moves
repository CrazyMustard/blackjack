node_player* Double(node_card** deckhead,int decks,Player* house,node_player* current_player){
	current_player->player.money-=bet;
	current_player->player.bet*=2;
	DealCards(deckhead,current_player,house,decks,1,1);
	return current_player->next;
}

node_player* Surrender(node_player* current_player){
	current_player->player.surrender=TRUE;
	current_player->player.money*=0.5*(current_player->player.bet);
	current_player->player.games_result.lost+=1;
	return current_player->next;
}

Bet(node_player* head){
	node_player* tmp;
	char buf[8],buf2[8];
	float bet;
	unsigned short id=0;

	do{
		tmp=head;	
		printf("Name of the player: ");
		if (fgets(buf, sizeof(buf), stdin) != NULL){
			id=0;		
			for(int i=0;i<8;i++)
				id+=tmp->player.name[i]==buf[i];
			do{	
				if(id==8){		
					do{	
						printf("New bet value: ");
						fgets(buf2,sizeof(buf2),stdin);
						err=sscanf(buf2,"%f",&bet);	
						if(err!=1 || bet<2 || bet>head->player.money)
							printf("Bet value not valid!\n");					
					}while(err!=1 || bet<2 || bet>head->player.money);
					break;
				}
				else if((tmp=tmp->next)==NULL)
					printf("There's no player with such name.\n");
			}while(tmp!=NULL);
		}
		else
			printf("Not valid!\n");
	}while(id!=8);
	tmp->player.bet=bet;

}







void GetBankroll_GameResults(Player* house, node_player* head, int bet)
{
	while(head!=NULL){
		if(head->player.surrender==TRUE)
			current_player->player.surrender=FALSE;
		else if(head->player.score>21)
			head->player.games_result.tied+=(house->score>21),head->player.games_result.lost+=(house->score<=21);
		else if(house->score>21){
			head->player.money+=2*bet + 0.5*bet*(head->player.score==21 && head->player.cards->size==2);
			head->player.games_result.won+=1;
		}
		else if(house->score==head->player.score){
			if(house->score==21){
				if( head->player.cards->size==house->cards->size ||  head->player.cards->size!=2 && house->cards->size!=2)
					head->player.money+=bet, head->player.games_result.tied+=1;
				else if(head->player.cards->size==2 && house->cards->size!=2)
					head->player.money+=2.5*bet,head->player.games_result.won+=1;
				else //(head->player.cards->size!=2 && house->cards->size==2)
					head->player.games_result.lost+=1;
			}
			else
				head->player.money+=bet, head->player.games_result.tied+=1;
		}
		else if(head->player.score!=21 || head->player.score==21 && head->player.cards->size!=2){
            head->player.money+= 2*bet*(head->player.score > house->score);
			(head->player.score > house->score)?head->player.games_result.won+=1:head->player.games_result.lost+=1;
		}
		else
			head->player.money+=2.5*bet,head->player.games_result.won+=1;

		head=head->next;
	}
}
